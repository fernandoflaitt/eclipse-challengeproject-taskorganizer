// <auto-generated />
using System;
using Eclipse.ChallengeProject.TaskOrganizer.Infra.Data.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Eclipse.ChallengeProject.TaskOrganizer.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241113172554_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.HistoryDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HistoryDetailId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Field");

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("NewValue");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("OldValue");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("HistoryDetail", (string)null);
                });

            modelBuilder.Entity("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.HistoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HistoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateChanged")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateChanged");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Detail");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("History", (string)null);
                });

            modelBuilder.Entity("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.ProjectEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.TaskCommentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskCommentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Description");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskComment", (string)null);
                });

            modelBuilder.Entity("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.TaskEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Detail");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Task", (string)null);
                });

            modelBuilder.Entity("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Function")
                        .HasColumnType("int")
                        .HasColumnName("Function");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Function = 1,
                            Name = "User Manager 1"
                        },
                        new
                        {
                            Id = 2,
                            Function = 1,
                            Name = "User Manager 2"
                        },
                        new
                        {
                            Id = 3,
                            Function = 2,
                            Name = "User Developer 1"
                        },
                        new
                        {
                            Id = 4,
                            Function = 2,
                            Name = "User Developer 2"
                        },
                        new
                        {
                            Id = 5,
                            Function = 2,
                            Name = "User Developer 3"
                        });
                });

            modelBuilder.Entity("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.UserProjectEntity", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("Project_FKIndex1");

                    b.HasIndex("UserId")
                        .HasDatabaseName("User_FKIndex2");

                    b.ToTable("UserProject", (string)null);
                });

            modelBuilder.Entity("ProjectEntityUserEntity", b =>
                {
                    b.Property<int>("ProjectsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("ProjectsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ProjectEntityUserEntity");
                });

            modelBuilder.Entity("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.HistoryDetailEntity", b =>
                {
                    b.HasOne("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.HistoryEntity", "History")
                        .WithMany("Details")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");
                });

            modelBuilder.Entity("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.HistoryEntity", b =>
                {
                    b.HasOne("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.UserEntity", "User")
                        .WithMany("History")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.TaskCommentEntity", b =>
                {
                    b.HasOne("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.TaskEntity", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.TaskEntity", b =>
                {
                    b.HasOne("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.ProjectEntity", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.UserEntity", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.UserProjectEntity", b =>
                {
                    b.HasOne("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.ProjectEntity", "Project")
                        .WithMany("UserProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.UserEntity", "User")
                        .WithMany("UserProject")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectEntityUserEntity", b =>
                {
                    b.HasOne("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.ProjectEntity", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.HistoryEntity", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.ProjectEntity", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("UserProject");
                });

            modelBuilder.Entity("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.TaskEntity", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Eclipse.ChallengeProject.TaskOrganizer.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("History");

                    b.Navigation("Tasks");

                    b.Navigation("UserProject");
                });
#pragma warning restore 612, 618
        }
    }
}
